<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 1. com.hongsi.purchbook.mapper.ItemMapper 인터페이스 선언 -->
<!-- 2. root-context.xml <mybatis-spring:scan ~~ /> 태그로 기본 패키지 지정 -->
<!-- 3. com.hongsi.purchbook.mapper.ItemMapper.xml 실행 작성 - src/main/resources -->
<!-- <![CDATA[ 이 사이에 있는 것은 mybatis가 처리하지 않고 그대로 넘긴다. DB에서 처리되도록 ]]> -->

<mapper namespace="com.hongsi.purchbook.mapper.PurchIngMapper">
	
	<!-- 	재료 구매한 리스트 -->
	<select id="list" resultType="com.hongsi.purchbook.vo.PurchIngVO">
	SELECT 	
		P.CNO,
		P.BUYDATE, 
		P.GUBUN,
		I.KNAME ITEM,		
		P.CONTENT,		
		P.QTY,		
		P.PRICE,
		P.PURSHOP,			
		P.INDATE,
		P.COMM
	FROM 
	(
	SELECT 
			CNO,
			TO_CHAR(BUYDATE, 'yyyy-MM-dd') BUYDATE,
			ITEM,
			GUBUN,
			CONTENT,		
			QTY,		
			PRICE,
			PURSHOP,			
			TO_CHAR(INDATE, 'yyyy-MM-dd')  INDATE,
			COMM,		
			RDATE,
			SUMQTY		
		FROM PURCH_ING
		WHERE	STATUS = 'purch'
		AND FLAG != 4
	) P,
	(
		SELECT KNAME, CODE FROM INGREDIENT
	) I
	WHERE 	P.ITEM = I.CODE	
	ORDER BY P.BUYDATE DESC 
	</select>

	<!-- 	주문번호에 의한 재료 구매 or 입출고 정보 가져오기 -->
	<select id="selectBuyStorageInfoByCno" resultType="com.hongsi.purchbook.vo.PurchIngVO">
	SELECT 	
		P.CNO,
		P.BUYDATE, 
		P.ITEM,
		I.KNAME,		
		P.GUBUN,
		P.CONTENT,		
		P.QTY,		
		P.PRICE,
		P.PURSHOP,
		P.INDATE,
		P.COMM,
		P.BUYER,
		P.SUMQTY,
		P.RDATE
	FROM 
	(
	SELECT 
			CNO,
			TO_CHAR(BUYDATE, 'yyyy-MM-dd') BUYDATE,
			ITEM,
			GUBUN,
			CONTENT,		
			QTY,		
			PRICE,
			PURSHOP,			
			TO_CHAR(INDATE, 'yyyy-MM-dd')  INDATE,
			COMM,
			BUYER,
			SUMQTY,
			RDATE		
		FROM PURCH_ING
		WHERE	STATUS = #{status}
		AND FLAG != 4
		AND		CNO = #{cno}
	) P,
	(
		SELECT KNAME, CODE FROM INGREDIENT
	) I
	WHERE P.ITEM = I.CODE
	ORDER BY P.BUYDATE DESC 
	</select>

	<!-- 	재료 구매 or 입출고 정보삭제 처리		 -->
	<update id="deleteIng">
	UPDATE PURCH_ING
	SET 	FLAG = 4, UDATE = SYSDATE
	WHERE 	CNO	= #{cno}
	AND		STATUS = #{status}
	</update>

	<!-- TRACE : 	재료 구매 or 입출고 정보삭제 처리 :  -->
	<insert id="deleteIngTrace">
	INSERT INTO PURCH_ING_TRACE (
		UNQ,
		CNO,		
		STATUS,		
		FLAG
	) VALUES (
		PURCH_ING_TRACE_PK.NEXTVAL,
		#{cno},
		#{status},		
		4
	)		
	</insert>	

	
	<!-- 	구매한 재료중에 입력일이 없는 재료들만 구하기 : 재료구매 화면에서 입력일 기입 가능 -->
	<select id="selectNonInDate" resultType="com.hongsi.purchbook.vo.PurchIngVO">		
	SELECT 	
		P.CNO,		
		P.BUYDATE, 
		P.ITEM, 
		I.KNAME, 
		P.GUBUN,
		P.CONTENT,		
		P.QTY,		
		P.PRICE,
		P.PURSHOP
	FROM 
	(
	SELECT 
			CNO,
			TO_CHAR(BUYDATE, 'yyyy-MM-dd') BUYDATE,
			ITEM,
			GUBUN,
			CONTENT,		
			QTY,		
			PRICE,
			PURSHOP	
		FROM PURCH_ING
		WHERE 	INDATE IS NULL
		AND		STATUS = 'purch'
		AND FLAG != 4
	) P,
	(
		SELECT KNAME, CODE FROM INGREDIENT
	) I
	WHERE P.ITEM = I.CODE
	ORDER BY P.BUYDATE DESC
	</select>
	
	<!-- 	재료 구매 정보 저장 -->
	<insert id="insertIng">
	INSERT INTO PURCH_ING (
		CNO,
		BUYDATE,
		ITEM,
		GUBUN,
		CONTENT,
		QTY,				
		PRICE,	
		PURSHOP,		
		INDATE,
		COMM,
		BUYER,
		SUMQTY,
		STATUS,
		GUBUNCODE,
		FLAG
	) VALUES (
		PURCH_ING_PK.NEXTVAL,
		#{buyDate},
		#{item},
		#{gubun},
		#{content},
		#{qty},		
		#{price},
		#{purShop},
		TO_DATE(#{inDate},'YYYYMMDD'),
		#{comm},
		#{buyer},
		#{content} * #{qty},
		#{status},
		#{gubunCode},
		#{flag}
	)
	</insert>

	<!-- TRACE : 재료 구매 정보 저장 -->
	<insert id="insertIngTrace">
	INSERT INTO PURCH_ING_TRACE (
		UNQ,
		CNO,
		BUYDATE,
		ITEM,
		GUBUN,
		CONTENT,
		QTY,				
		PRICE,	
		PURSHOP,		
		INDATE,
		COMM,
		BUYER,
		SUMQTY,
		STATUS,
		GUBUNCODE,
		FLAG
	) VALUES (
		PURCH_ING_TRACE_PK.NEXTVAL,
		#{cno},
		#{buyDate},
		#{item},
		#{gubun},
		#{content},
		#{qty},		
		#{price},
		#{purShop},
		TO_DATE(#{inDate},'YYYYMMDD'),
		#{comm},
		#{buyer},
		#{content} * #{qty},
		#{status},
		#{gubunCode},
		#{flag}
	)
	</insert>	
	
	<select id="selectIgdTotalList" resultType="com.hongsi.purchbook.vo.PurchIngVO">
	SELECT 	A.ITEM ITEM,
			B.KNAME KNAME,
			(A.INT_1 + A.INT_2 + A.INT_3 + A.INT_4 + A.INT_5) INTOTAL,
			(A.OUT_1 + A.OUT_2) OUTTOTAL,
			(A.DIS_1 + A.DIS_2) DISTOTAL,
			(A.IN_TOTAL - A.OUT_TOTAL) TOTAL
	FROM 
	(	SELECT 	ITEM,
				SUM(CASE WHEN GUBUN = '신규' THEN SUMQTY ELSE 0 END) INT_1,
				SUM(CASE WHEN GUBUN = '구매' THEN SUMQTY ELSE 0 END) INT_2,
				SUM(CASE WHEN GUBUN = '반품' THEN SUMQTY ELSE 0 END) INT_3,				
				SUM(CASE WHEN GUBUN = '입고_office' THEN SUMQTY ELSE 0 END) INT_4,
				SUM(CASE WHEN GUBUN = '입고_cafe' THEN SUMQTY ELSE 0 END) INT_5,
				SUM(CASE WHEN GUBUN = '출고' THEN SUMQTY ELSE 0 END) OUT_1,
				SUM(CASE WHEN GUBUN = '교환' THEN SUMQTY ELSE 0 END) OUT_2,
				SUM(CASE WHEN GUBUN = '손실' THEN SUMQTY ELSE 0 END) DIS_1,							
				SUM(CASE WHEN GUBUN = '폐기' THEN SUMQTY ELSE 0 END) DIS_2,
				SUM(CASE WHEN GUBUNCODE = 'in' THEN SUMQTY ELSE 0 END) IN_TOTAL,
				SUM(CASE WHEN GUBUNCODE = 'out' THEN SUMQTY ELSE 0 END) OUT_TOTAL
		FROM 	PURCH_ING
		WHERE 	INDATE IS NOT NULL
		AND 	FLAG != 4
		GROUP BY ITEM
	) A
	INNER JOIN INGREDIENT B ON A.ITEM = B.CODE
	ORDER BY B.KNAME
	</select>
	
	<!-- 	재료구매 화면에서 입력일 입력 -->
	<update id="updateInDate">
	UPDATE PURCH_ING 
	SET INDATE = TO_DATE(#{inDate},'YYYY-MM-DD'), FLAG = 2	
	WHERE CNO = #{cno}	
	</update>
	
	<!-- TRACE : 재료구매 화면에서 입력일 입력 :  -->
	<insert id="insertInDateTrace">
	INSERT INTO PURCH_ING_TRACE (
		UNQ,
		CNO,
		INDATE,
		STATUS,
		GUBUNCODE,
		FLAG
	) VALUES (
		PURCH_ING_TRACE_PK.NEXTVAL,
		#{cno},
		TO_DATE(#{inDate},'YYYY-MM-DD'),
		'purch',
		'in',
		2
	)		
	</insert>	

	<!-- 	재료 입출고 List -->
	<select id="selectStorageInOut" resultType="com.hongsi.purchbook.vo.PurchIngVO">		
	SELECT 	
		P.CNO,		
		P.BUYDATE, 
		P.ITEM, 
		I.KNAME, 
		P.GUBUN,
		P.CONTENT,		
		P.QTY,		
		P.BUYER,
		P.COMM
	FROM 
	(
		SELECT 
			CNO,
			TO_CHAR(BUYDATE, 'yyyy-MM-dd') BUYDATE,
			ITEM,
			GUBUN,
			CONTENT,		
			QTY,		
			BUYER,
			COMM
		FROM PURCH_ING
		WHERE STATUS = 'storage'
		AND FLAG != 4		
	) P,
	(
		SELECT KNAME, CODE FROM INGREDIENT
	) I
	WHERE P.ITEM = I.CODE
	ORDER BY P.BUYDATE DESC
	</select>

	<!-- 재료 구매 정보 수정 처리 -->
	<update id="updateIng">
	UPDATE 	PURCH_ING
	SET		BUYDATE = #{buyDate},		
			ITEM 	= #{item},		
			GUBUN 	= #{gubun},
			CONTENT = #{content},
			QTY 	= #{qty},
			PRICE	= #{price},
			PURSHOP = #{purShop},
			INDATE 	= TO_DATE(#{inDate},'YYYYMMDD'),
			COMM 	= #{comm},
			BUYER 	= #{buyer},
			SUMQTY 	= #{content} * #{qty},
			STATUS 	= #{status},
			GUBUNCODE = #{gubunCode},
			FLAG 	= 2,
			UDATE 	= SYSDATE	
	WHERE 	CNO 	= #{cno}
	AND		FLAG 	!= 4
	</update>

	<!-- TRACE : 재료 구매 정보 수정 처리에 대한 저장 -->
	<insert id="updateIngTrace">
	INSERT INTO PURCH_ING_TRACE (
		UNQ,
		CNO,
		BUYDATE,
		ITEM,
		GUBUN,
		CONTENT,
		QTY,				
		PRICE,	
		PURSHOP,		
		INDATE,		
		COMM,
		BUYER,
		SUMQTY,
		STATUS,
		GUBUNCODE,
		FLAG
	) VALUES (
		PURCH_ING_TRACE_PK.NEXTVAL,
		#{cno},
		#{buyDate},
		#{item},
		#{gubun},
		#{content},
		#{qty},		
		#{price},
		#{purShop},
		TO_DATE(#{inDate},'YYYYMMDD'),
		#{comm},
		#{buyer},
		#{content} * #{qty},
		#{status},
		#{gubunCode},
		2
	)
	</insert>


	<!-- 재료 입출고 정보 수정 처리 -->
<!-- 	<update id="updateStorageInfoByCno"> -->
<!-- 	UPDATE 	PURCH_ING -->
<!-- 	SET		BUYDATE = #{buyDate},		 -->
<!-- 			ITEM 	= #{item},		 -->
<!-- 			GUBUN 	= #{gubun}, -->
<!-- 			CONTENT = #{content}, -->
<!-- 			INDATE 	= #{buyDate}, -->
<!-- 			COMM 	= #{comm}, -->
<!-- 			BUYER 	= #{buyer}, -->
<!-- 			SUMQTY 	= #{content}, -->
<!-- 			STATUS 	= 'storage', -->
<!-- 			GUBUNCODE = #{gubunCode}, -->
<!-- 			FLAG 	= 2, -->
<!-- 			UDATE 	= SYSDATE	 -->
<!-- 	WHERE 	CNO 	= #{cno} -->
<!-- 	AND		FLAG 	!= 4 -->
<!-- 	</update> -->



</mapper>
