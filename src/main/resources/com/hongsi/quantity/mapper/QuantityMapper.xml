<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 1. com.hongsi.quantity.mapper.QuantityMapper 인터페이스 선언 -->
<!-- 2. root-context.xml <mybatis-spring:scan ~~ /> 태그로 기본 패키지 지정 -->
<!-- 3. com.hongsi.quantity.mapper.QuantityMapper.xml 실행 작성 - src/main/resources -->
<!-- <![CDATA[ 이 사이에 있는 것은 mybatis가 처리하지 않고 그대로 넘긴다. DB에서 처리되도록 ]]> -->

<!-- QuantityVO(cno=34, code=STC_100_001, name=STC_100, amount=100, ingredient=Whole Wheat, igt_code=in_028, qty=4) -->
<mapper namespace="com.hongsi.quantity.mapper.QuantityMapper">
	<select id="list" resultType="com.hongsi.quantity.vo.QuantityVO">
	SELECT 
		CNO,
		CODE,
		NAME,
		AMOUNT,
		INGREDIENT,
		IGT_CODE,
		QTY		
	FROM QUANTITY
	ORDER BY INGREDIENT ASC
	</select>
	
	<select id="selectItemQty" resultType="com.hongsi.quantity.vo.QuantityVO">
	SELECT 
		CNO,
		CODE,
		NAME,
		AMOUNT,
		INGREDIENT,
		IGT_CODE,
		QTY
	FROM 	QUANTITY
	WHERE	NAME = #{NAME} 
	ORDER BY CNO ASC
	
	</select>

	<select id="selectTotalByItem" resultType="com.hongsi.quantity.vo.QuantityVO">	
	SELECT 
		Q.CNO,
		Q.CODE,
		Q.NAME,
		Q.AMOUNT,
		Q.INGREDIENT,
		Q.IGT_CODE,
		Q.QTY,
		Q.ITEM,
		Q.TOTAL,
		I.KNAME
	FROM	
	(	
		<!-- 재료 목록 구하기 -->
		SELECT  CODE, KNAME, ENAME FROM INGREDIENT
	) I,	 
	(	
		SELECT 
			QUANTITY.CNO,
			QUANTITY.CODE,
			QUANTITY.NAME,
			QUANTITY.AMOUNT,
			QUANTITY.INGREDIENT,
			QUANTITY.IGT_CODE,
			QUANTITY.QTY,
			AL.ITEM ITEM,
			NVL(AL.TOTAL, 0) TOTAL
		FROM 	QUANTITY,	  
			( SELECT A.ITEM ITEM, (A.INTOTAL - A.OUTTOTAL) TOTAL
			FROM 
			(	SELECT 	ITEM,
						SUM(CASE WHEN GUBUNCODE = 'in' THEN SUMQTY ELSE 0 END) INTOTAL,
						SUM(CASE WHEN GUBUNCODE = 'out' THEN SUMQTY ELSE 0 END) OUTTOTAL
				FROM 	PURCH_ING
				WHERE 	INDATE IS NOT NULL
				AND 	FLAG != 4
				GROUP BY ITEM
			) A ) AL 
		WHERE	QUANTITY.CODE = #{code} AND QUANTITY.IGT_CODE = AL.ITEM(+)
	) Q
	WHERE Q.IGT_CODE = I.CODE
	ORDER BY I.KNAME
	</select>

	<select id="selectAllIngreStock" resultType="com.hongsi.quantity.vo.QuantityVO">
	SELECT 	II.KNAME KNAME, II.ENAME ENAME, II.CODE CODE, 
			NVL(II.ORI_QTY, 0) ORI_QTY, NVL(II.ORI_QTY_2WEEK, 0) ORI_QTY_2WEEK, 
			NVL(II.ERL_QTY, 0) ERL_QTY, NVL(II.ERL_QTY_2WEEK, 0) ERL_QTY_2WEEK,  
			NVL(II.STC_QTY, 0) STC_QTY, NVL(II.STC_QTY_2WEEK, 0) STC_QTY_2WEEK, 
			NVL(II.ST.TOTAL, 0) TOTAL, 
			(NVL(II.ORI_QTY_2WEEK, 0) + NVL(II.ERL_QTY_2WEEK, 0) + NVL(II.STC_QTY_2WEEK, 0)) NEED2WEEK
	FROM (
		SELECT I.KNAME, I.ENAME, I.CODE, I.ORI_QTY, I.ORI_QTY_2WEEK, I.ERL_QTY, I.ERL_QTY_2WEEK, I.STC_QTY, I.STC_QTY_2WEEK
		FROM (
			SELECT ORI_ERL.CODE, ORI_ERL.KNAME, ORI_ERL.ENAME, ORI_ERL.ORI_QTY, ORI_ERL.ORI_QTY_2WEEK, ORI_ERL.ERL_QTY, ORI_ERL.ERL_QTY_2WEEK, D.STC_QTY, D.STC_QTY_2WEEK
			FROM
			(
				SELECT ORI.CODE CODE, ORI.KNAME KNAME, ORI.ENAME ENAME, ORI.ORI_QTY ORI_QTY, ORI.ORI_QTY_2WEEK ORI_QTY_2WEEK, C.ERL_QTY ERL_QTY , C.ERL_QTY_2WEEK ERL_QTY_2WEEK
				FROM
				(
					SELECT A.CODE, A.KNAME, A.ENAME, B.ORI_QTY, B.ORI_QTY_2WEEK
					FROM
					(	<!-- 재료 목록 구하기 -->
						SELECT  CODE, KNAME, ENAME FROM INGREDIENT 
					) A
					LEFT OUTER JOIN 
					(	<!-- ORIGINAL 100g 재료 구하기, 재고 비축으로 500g 80개 1주분(1주에 40개) 재료 구하기  -->
						SELECT  IGT_CODE, INGREDIENT, QTY ORI_QTY, QTY*5*40 ORI_QTY_2WEEK 
						FROM QUANTITY
						WHERE NAME ='ORI_100'
					) B
					ON A.CODE = B.IGT_CODE					
				) ORI
				LEFT OUTER JOIN 
				(	<!-- EARLGREY 100g 재료 구하기 -->
					SELECT  IGT_CODE, INGREDIENT, QTY ERL_QTY, QTY*5*40 ERL_QTY_2WEEK
					FROM QUANTITY
					WHERE NAME ='ERL_100'
				) C
				ON ORI.CODE = C.IGT_CODE
			) ORI_ERL
			LEFT OUTER JOIN 
			(	<!-- SALTCARAMEL 100g 재료 구하기 -->
				SELECT  IGT_CODE, INGREDIENT, QTY STC_QTY, QTY*5*40 STC_QTY_2WEEK 
				FROM QUANTITY
				WHERE NAME ='STC_100'
			) D
			ON ORI_ERL.CODE = D.IGT_CODE 
		) I 
	) II
	LEFT OUTER JOIN 
	(   <!-- 전 재료의 재고량 STOCK AS S / ST -->
		SELECT S.ITEM ITEM, (S.INTOTAL - S.OUTTOTAL) TOTAL
		FROM 
		(	SELECT 	ITEM,
					SUM(CASE WHEN GUBUNCODE = 'in' THEN SUMQTY ELSE 0 END) INTOTAL,
					SUM(CASE WHEN GUBUNCODE = 'out' THEN SUMQTY ELSE 0 END) OUTTOTAL
			FROM PURCH_ING
			WHERE INDATE IS NOT NULL
			AND FLAG != 4
			GROUP BY ITEM
		) S
	) ST
	ON II.CODE = ST.ITEM
	ORDER BY II.KNAME
	</select>

	<!-- 	MAIN 화면용 -->
	<!-- 	재료 (ori 필요 & erl 필요 & stc 필요 & 현재재고 & 금주필요 & 최종재고 & 주문필요) -->
	<select id="selectTotalNeedFinal" resultType="com.hongsi.quantity.vo.QuantityVO">	
	SELECT 	Z.CODE, Z.KNAME, Z.ORINEED ori_qty_2week, Z.ERLNEED erl_qty_2week, Z.STCNEED stc_qty_2week, 
			Z.TOTAL, Z.NEEDSUM, Z.SUMCAFE, Z.SUMOFFICE, Z.ORI_NEED2WEEK, Z.ERL_NEED2WEEK, Z.STC_NEED2WEEK, Z.NEED2WEEK,  
			Z.FINALNEED
<!-- 			CASE WHEN Z.FINALNEED >=0 THEN 0 ELSE Z.FINALNEED END AS FINALNEED -->
	FROM
	(
		SELECT T.CODE, T.KNAME, T.ORINEED, T.ERLNEED, T.STCNEED, T.NEEDSUM, T.TOTAL, 
		NVL(B.ORI_NEED2WEEK,0) ORI_NEED2WEEK, NVL(B.ERL_NEED2WEEK,0) ERL_NEED2WEEK, NVL(B.STC_NEED2WEEK,0) STC_NEED2WEEK, NVL(B.NEED2WEEK,0) NEED2WEEK, 
		T.SUMCAFE, T.SUMOFFICE, (NVL(T.TOTAL,0) - NVL(T.NEEDSUM,0)) FINALNEED
<!-- 		T.SUMCAFE, (NVL(T.TOTAL,0) - NVL(T.NEEDSUM,0) - NVL(B.NEED2WEEK,0)) FINALNEED 2주분 필요량은 우선은 제외 시킴-->
		FROM
		(	/* 2주분 생산량 계산 ORI (500g 20개) : ERL (500g 10개) : STC (500g 10개) 2:1:1 비율 */  
			SELECT NVL(NVL(OES.O_CODE2WEEK,OES.E_CODE2WEEK),OES.S_CODE2WEEK) CODE2WEEK, 
			OES.ORI_NEED2WEEK, OES.ERL_NEED2WEEK, OES.STC_NEED2WEEK, OES.NEED2WEEK
			FROM (
				SELECT 	N.O_CODE2WEEK O_CODE2WEEK, N.O_QTY2WEEK, N.O_NEED2WEEK ORI_NEED2WEEK, 
						N.E_CODE2WEEK E_CODE2WEEK, N.E_QTY2WEEK, N.E_NEED2WEEK ERL_NEED2WEEK, 
						N.S_CODE2WEEK S_CODE2WEEK, N.S_QTY2WEEK, N.S_NEED2WEEK STC_NEED2WEEK,
						NVL((N.O_NEED2WEEK + N.E_NEED2WEEK + N.S_NEED2WEEK ),0) NEED2WEEK
				FROM (
					SELECT OE.O_CODE2WEEK, NVL(OE.O_QTY2WEEK,0) O_QTY2WEEK, NVL(OE.O_NEED2WEEK,0) O_NEED2WEEK, 
						OE.E_CODE2WEEK, NVL(OE.E_QTY2WEEK,0) E_QTY2WEEK, NVL(OE.E_NEED2WEEK,0) E_NEED2WEEK, 
						S.S_CODE2WEEK, NVL(S.S_QTY2WEEK,0) S_QTY2WEEK, NVL(S.S_NEED2WEEK,0) S_NEED2WEEK
					FROM
					(
						SELECT O.O_CODE2WEEK, NVL(O.O_QTY2WEEK,0) O_QTY2WEEK, NVL(O.O_NEED2WEEK,0) O_NEED2WEEK, E.E_CODE2WEEK, 
							NVL(E.E_QTY2WEEK,0) E_QTY2WEEK, NVL(E.E_NEED2WEEK,0) E_NEED2WEEK
						FROM 
						(   /* ORI_100 2주분 생산 필요량 500G * 20 */
							SELECT NAME, IGT_CODE O_CODE2WEEK, NVL(QTY,0) O_QTY2WEEK, NVL(QTY,0)*5*20 O_NEED2WEEK 
							FROM QUANTITY 
							WHERE  NAME = 'ORI_100'
						) O
						FULL OUTER JOIN
						( 	/* ERL_100 2주분 생산 필요량 500G * 10 */
							SELECT NAME, IGT_CODE E_CODE2WEEK, NVL(QTY,0) E_QTY2WEEK, NVL(QTY,0)*5*10 E_NEED2WEEK 
							FROM QUANTITY 
							WHERE  NAME = 'ERL_100'
						) E
						ON O.O_CODE2WEEK = E.E_CODE2WEEK
					) OE
					FULL OUTER JOIN
					(	/* STC_100 2주분 생산 필요량 500G * 10 */
						SELECT NAME, IGT_CODE S_CODE2WEEK, NVL(QTY,0) S_QTY2WEEK, NVL(QTY,0)*5*10 S_NEED2WEEK 
						FROM QUANTITY 
						WHERE  NAME = 'STC_100'
					) S
					ON OE.O_CODE2WEEK = S.S_CODE2WEEK
				) N
			) OES
		) B
		FULL OUTER JOIN
		(
			SELECT C.CODE CODE, C.KNAME KNAME, C.ORINEED, C.ERLNEED, C.STCNEED, C.NEEDSUM NEEDSUM, NVL(A.TOTAL,0) TOTAL, NVL(A.SUMCAFE,0) SUMCAFE, NVL(A.SUMOFFICE,0) SUMOFFICE
			FROM 
			(
				SELECT S.ITEM ITEM, NVL((S.INTOTAL - S.OUTTOTAL),0) TOTAL, NVL(CAFE.SUMCAFE,0) SUMCAFE, NVL(OFFICE.SUMOFFICE,0) SUMOFFICE
				FROM 
				(	/* 총 재고량 */
					SELECT 	ITEM,
							SUM(CASE WHEN GUBUNCODE = 'in' THEN SUMQTY ELSE 0 END) INTOTAL,
							SUM(CASE WHEN GUBUNCODE = 'out' THEN SUMQTY ELSE 0 END) OUTTOTAL
					FROM PURCH_ING
					WHERE INDATE IS NOT NULL
					AND FLAG != 4  /* 삭제 처리된 주문은 제외 */
					GROUP BY ITEM
				) S
				LEFT JOIN
				(	/* 카페에 있는 재고량 */		
					SELECT A.ITEM, (NVL(A.SUMINSUMQTY,0) - NVL(B.SUMOUTSUMQTY,0) ) SUMCAFE
					FROM 
					(
						SELECT ITEM, SUM( NVL(SUMQTY,0)) SUMINSUMQTY FROM PURCH_ING
						WHERE 1=1
						AND INDATE IS NOT NULL
						AND GUBUNCODE = 'in' 
						AND ( GUBUN = '입고_cafe' OR GUBUN = '구매_cafe' )
						AND FLAG != 4
						GROUP BY ITEM
					) A
					FULL OUTER JOIN 
					( 
						SELECT ITEM, SUM( NVL(SUMQTY,0)) SUMOUTSUMQTY FROM PURCH_ING
						WHERE  1=1
						AND INDATE IS NOT NULL
						AND GUBUNCODE = 'out' 
						AND GUBUN = '출고_cafe'
						AND FLAG != 4
						GROUP BY ITEM
					) B
					ON A.ITEM = B.ITEM
				) CAFE
				ON S.ITEM = CAFE.ITEM
				LEFT JOIN
				(	/* 오피스에 있는 재고량 */		
					SELECT C.ITEM, (NVL(C.SUMINSUMQTY,0) - NVL(D.SUMOUTSUMQTY,0) ) SUMOFFICE
					FROM 
					(
						SELECT ITEM, SUM( NVL(SUMQTY,0)) SUMINSUMQTY FROM PURCH_ING
						WHERE 1=1
						AND INDATE IS NOT NULL
						AND GUBUNCODE = 'in' 
						AND ( GUBUN = '입고_office' OR GUBUN = '구매_office' OR GUBUN = '구매')
						AND FLAG != 4
						GROUP BY ITEM
					) C
					FULL OUTER JOIN 
					( 
						SELECT ITEM, SUM( NVL(SUMQTY,0)) SUMOUTSUMQTY FROM PURCH_ING
						WHERE  1=1
						AND INDATE IS NOT NULL
						AND GUBUNCODE = 'out' 
						AND (GUBUN = '출고_office' OR GUBUN = '출고')
						AND FLAG != 4
						GROUP BY ITEM
					) D
					ON C.ITEM = D.ITEM
				) OFFICE
				ON S.ITEM = OFFICE.ITEM
			) A 
			RIGHT OUTER JOIN  /*  MAINVIEW='mv'인 재료만 보기 위함 */
			(	/* 필요 재료량 구하기 */
				SELECT N.CODE, N.KNAME,
				N.ORINEED, N.ERLNEED, N.STCNEED, (NVL(N.ORINEED, 0) + NVL(N.ERLNEED, 0) + NVL(N.STCNEED, 0)) NEEDSUM
				FROM 
				(
					SELECT  ING_ORI_ERL.CODE CODE, ING_ORI_ERL.KNAME KNAME, 
					ING_ORI_ERL.ORI_QTY, ING_ORI_ERL.ORISUM, ING_ORI_ERL.ORINEED ORINEED,
					ING_ORI_ERL.ERL_QTY, ING_ORI_ERL.ERLSUM, ING_ORI_ERL.ERLNEED ERLNEED,
					NVL(STC.STC_QTY,0) STC_QTY, NVL(STC.STCSUM,0) STCSUM, NVL(STC.STCNEED,0) STCNEED
					FROM 
					(
						SELECT  ING_ORI.CODE, ING_ORI.KNAME, ING_ORI.ORI_IGT_CODE ORI_IGT_CODE, ING_ORI.ORI_QTY ORI_QTY, ING_ORI.ORISUM ORISUM, ING_ORI.ORINEED ORINEED,
						ERL.ERL_IGT_CODE ERL_IGT_CODE, NVL(ERL.ERL_QTY,0) ERL_QTY, NVL(ERL.ERLSUM,0) ERLSUM, NVL(ERL.ERLNEED,0) ERLNEED
						FROM 
						(	SELECT  ING.CODE, ING.KNAME, NVL(ORI.ORI_IGT_CODE,'') 
									ORI_IGT_CODE, NVL(ORI.ORI_QTY,0) ORI_QTY, 
									NVL(ORI.ORISUM,0) ORISUM, NVL(ORI.ORINEED,0) ORINEED
							FROM 
							(	/* 재료 정보 (재료코드, 한글명, 영문명) */
								SELECT  CODE, KNAME, ENAME FROM INGREDIENT WHERE MAINVIEW='mv'
							) ING
							LEFT OUTER JOIN 
							(
								SELECT QTY.IGT_CODE ORI_IGT_CODE, QTY.QTY ORI_QTY, PURCH.ORISUM, (QTY.QTY * CEIL(PURCH.ORISUM/2100)) ORINEED
								FROM 
								(	/* ORI_ROAST 1회 기본량 */
									SELECT IGT_CODE, QTY FROM QUANTITY 
									WHERE 1=1
									AND NAME ='ORI_ROAST'
									ORDER BY IGT_CODE
								) QTY
								, 
								( 	/* 1주간 주문량 */
									SELECT 
										(NVL(SUM(ORI_250),0)*250)+(NVL(SUM(ORI_500),0)*500)+(NVL(SUM(ORI_1000),0)*1000) ORISUM
									FROM PURCH_ORDER
									WHERE 1=1
									AND FLAG != 4
									AND ORDERDATE 
									BETWEEN TRUNC(SYSDATE, 'IW')-1 AND TRUNC(SYSDATE, 'IW')+5
								) PURCH
							) ORI
							ON ING.CODE = ORI.ORI_IGT_CODE
						) ING_ORI
						LEFT OUTER JOIN 
						(	/* ERL 1주간 주문량과 재료량 ERL_IGT_CODE:재료코드, ERLSUM: 주문량,  ERLNEED: 주문량에 의한 재료량 */
							SELECT QTY.IGT_CODE ERL_IGT_CODE, QTY.QTY ERL_QTY, PURCH.ERLSUM, (QTY.QTY * CEIL(PURCH.ERLSUM/1850)) ERLNEED
							FROM 
							(	/* ERL_ROAST 1회 기본량 */
								SELECT IGT_CODE , QTY 
								FROM QUANTITY 
								WHERE 1=1
								AND NAME ='ERL_ROAST'
								ORDER BY IGT_CODE
							) QTY, 
							( 	/* 1주간 주문량 */
								SELECT 
								(NVL(SUM(ERL_250),0)*250)+(NVL(SUM(ERL_500),0)*500)+(NVL(SUM(ERL_1000),0)*1000) ERLSUM
								FROM PURCH_ORDER
								WHERE 1=1
								AND FLAG != 4
								AND ORDERDATE BETWEEN TRUNC(SYSDATE, 'IW')-1 AND TRUNC(SYSDATE, 'IW')+5
							) PURCH
						) ERL
						ON ING_ORI.CODE = ERL.ERL_IGT_CODE	
					) ING_ORI_ERL
					LEFT OUTER JOIN 
					(
						SELECT QTY.IGT_CODE STC_IGT_CODE, QTY.QTY STC_QTY, PURCH.STCSUM, (QTY.QTY * CEIL(PURCH.STCSUM/2000)) STCNEED
						FROM 
						(	/* STC_ROAST 1회 기본량 */
							SELECT IGT_CODE, QTY FROM QUANTITY 
							WHERE 1=1
							AND NAME ='STC_ROAST'
						) QTY, 
						( 	/* 1주간 주문량 */
							SELECT 
								(NVL(SUM(STC_250),0)*250)+(NVL(SUM(STC_500),0)*500)+(NVL(SUM(STC_1000),0)*1000) STCSUM
							FROM PURCH_ORDER
							WHERE 1=1
							AND FLAG != 4
							AND ORDERDATE BETWEEN TRUNC(SYSDATE, 'IW')-1 AND TRUNC(SYSDATE, 'IW')+5
						) PURCH
					) STC
					ON ING_ORI_ERL.CODE=STC.STC_IGT_CODE
				) N	
			) C
			ON C.CODE = A.ITEM
		) T
		ON T.CODE = B.CODE2WEEK
	) Z
	ORDER BY Z.KNAME
	</select>	
		
 </mapper>
 


<!-- 	MAIN 화면용 : 재료 (ori 필요 & erl 필요 & stc 필요 & 현재재고 & 금주필요 & 최종재고 & 주문필요) 20220215

SELECT Z.CODE, Z.KNAME, Z.ORINEED ori_qty_2week, Z.ERLNEED erl_qty_2week, Z.STCNEED stc_qty_2week, Z.TOTAL, Z.NEEDSUM, Z.NEED2WEEK, Z.SUMCAFE, Z.FINALTOTAL, 
		CASE WHEN Z.FINALNEED >=0 THEN Z.FINALNEED ELSE 0 END AS FINALNEED
	FROM
	(
		SELECT T.CODE, T.KNAME, T.ORINEED, T.ERLNEED, T.STCNEED, T.NEEDSUM, T.TOTAL, NVL(B.NEED2WEEK,0) NEED2WEEK, 
		T.SUMCAFE, T.FINALTOTAL,  NVL(T.NEEDSUM,0) - (NVL(T.TOTAL,0) - NVL(B.NEED2WEEK,0)) FINALNEED
		FROM
		(
			SELECT IGT_CODE CODE2WEEK, SUM(QTY) QTY2WEEK, SUM(NVL(QTY,0)*5*40) NEED2WEEK 
			FROM QUANTITY 
			WHERE  AMOUNT = 100
			GROUP BY IGT_CODE ORDER BY IGT_CODE
		) B
		RIGHT OUTER JOIN
		(
		SELECT C.CODE CODE, C.KNAME KNAME, C.ORINEED, C.ERLNEED, C.STCNEED, C.NEEDSUM NEEDSUM, A.TOTAL TOTAL, A.SUMCAFE, ( NVL(A.TOTAL,0) - NVL(C.NEEDSUM,0)) FINALTOTAL
		FROM 
		(
			SELECT S.ITEM ITEM, (S.INTOTAL - S.OUTTOTAL) TOTAL, CAFE.SUMCAFE
			FROM 
			(	// 총 재고량
				SELECT 	ITEM,
						SUM(CASE WHEN GUBUNCODE = 'in' THEN SUMQTY ELSE 0 END) INTOTAL,
						SUM(CASE WHEN GUBUNCODE = 'out' THEN SUMQTY ELSE 0 END) OUTTOTAL
				FROM PURCH_ING
				WHERE INDATE IS NOT NULL
				AND FLAG != 4  // 삭제 처리된 주문은 제외
				GROUP BY ITEM
			) S
			LEFT JOIN
			(	// 카페에 있는 재고량		
				SELECT A.ITEM, (NVL(A.SUMINCONTENT,0) - NVL(B.SUMOUTCONTENT,0) ) SUMCAFE
				FROM 
				(SELECT ITEM, SUM( NVL(CONTENT,0)) SUMINCONTENT FROM PURCH_ING
				WHERE STATUS = 'storage'
				AND GUBUNCODE = 'in' 
				AND ( GUBUN = '입고_cafe' OR GUBUN = '구매_cafe' )
				AND FLAG != 4
				GROUP BY ITEM) A
				FULL OUTER JOIN ( SELECT ITEM, SUM( NVL(CONTENT,0)) SUMOUTCONTENT FROM PURCH_ING
				WHERE  STATUS = 'storage'
				AND GUBUNCODE = 'out' 
				AND GUBUN = '출고_cafe'
				AND FLAG != 4
				GROUP BY ITEM) B
				ON A.ITEM = B.ITEM
			) CAFE
			ON S.ITEM = CAFE.ITEM
		) A 
		LEFT OUTER JOIN
		(	// 필요 재료량 구하기
			SELECT N.CODE, N.KNAME,
			N.ORINEED, N.ERLNEED, N.STCNEED, (NVL(N.ORINEED, 0) + NVL(N.ERLNEED, 0) + NVL(N.STCNEED, 0)) NEEDSUM
			FROM 
			(
				SELECT  ING_ORI_ERL.CODE CODE, ING_ORI_ERL.KNAME KNAME, 
				ING_ORI_ERL.ORI_QTY, ING_ORI_ERL.ORISUM, ING_ORI_ERL.ORINEED ORINEED,
				ING_ORI_ERL.ERL_QTY, ING_ORI_ERL.ERLSUM, ING_ORI_ERL.ERLNEED ERLNEED,
				NVL(STC.STC_QTY,0) STC_QTY, NVL(STC.STCSUM,0) STCSUM, NVL(STC.STCNEED,0) STCNEED
				FROM 
				(
					SELECT  ING_ORI.CODE, ING_ORI.KNAME, ING_ORI.ORI_IGT_CODE ORI_IGT_CODE, ING_ORI.ORI_QTY ORI_QTY, ING_ORI.ORISUM ORISUM, ING_ORI.ORINEED ORINEED,
					ERL.ERL_IGT_CODE ERL_IGT_CODE, NVL(ERL.ERL_QTY,0) ERL_QTY, NVL(ERL.ERLSUM,0) ERLSUM, NVL(ERL.ERLNEED,0) ERLNEED
					FROM 
					(	SELECT  ING.CODE, ING.KNAME, NVL(ORI.ORI_IGT_CODE,'') 
								ORI_IGT_CODE, NVL(ORI.ORI_QTY,0) ORI_QTY, 
								NVL(ORI.ORISUM,0) ORISUM, NVL(ORI.ORINEED,0) ORINEED
						FROM 
						(	// 재료 정보 (재료코드, 한글명, 영문명)
							SELECT  CODE, KNAME, ENAME FROM INGREDIENT
						) ING
						LEFT OUTER JOIN 
						(
							SELECT QTY.IGT_CODE ORI_IGT_CODE, QTY.QTY ORI_QTY, PURCH.ORISUM, (QTY.QTY * (PURCH.ORISUM/100)) ORINEED
							FROM 
							(
								SELECT IGT_CODE, QTY FROM QUANTITY 
								WHERE 1=1
								AND NAME ='ORI_100'
								ORDER BY IGT_CODE
							) QTY
							, 
							( 	
								SELECT 
									(NVL(SUM(ORI_250),0)*250)+(NVL(SUM(ORI_500),0)*500)+(NVL(SUM(ORI_1000),0)*1000) ORISUM
								FROM PURCH_ORDER
								WHERE 1=1
								AND ORDERDATE 
								BETWEEN TRUNC(SYSDATE, 'IW')-1 AND TRUNC(SYSDATE, 'IW')+5
							) PURCH
						) ORI
						ON ING.CODE = ORI.ORI_IGT_CODE
					) ING_ORI
					LEFT OUTER JOIN 
					(	// ERL 1주간 주문량과 재료량 ERL_IGT_CODE:재료코드, ERLSUM: 주문량,  ERLNEED: 주문량에 의한 재료량
						SELECT QTY.IGT_CODE ERL_IGT_CODE, QTY.QTY ERL_QTY, PURCH.ERLSUM, (QTY.QTY * PURCH.ERLSUM/100) ERLNEED
						FROM 
						(	// ERL_100 기본량
							SELECT IGT_CODE , QTY FROM QUANTITY 
							WHERE 1=1
							AND NAME ='ERL_100'
							ORDER BY IGT_CODE
						) QTY, 
						( 	// 1주간 주문량
							SELECT 
							(NVL(SUM(ERL_250),0)*250)+(NVL(SUM(ERL_500),0)*500)+(NVL(SUM(ERL_1000),0)*1000) ERLSUM
							FROM PURCH_ORDER
							WHERE 1=1
							AND ORDERDATE BETWEEN TRUNC(SYSDATE, 'IW')-1 AND TRUNC(SYSDATE, 'IW')+5
						) PURCH
					) ERL
					ON ING_ORI.CODE = ERL.ERL_IGT_CODE	
				) ING_ORI_ERL
				LEFT OUTER JOIN 
				(
					SELECT QTY.IGT_CODE STC_IGT_CODE, QTY.QTY STC_QTY, PURCH.STCSUM, (QTY.QTY * PURCH.STCSUM/100) STCNEED
					FROM 
					(
						SELECT IGT_CODE, QTY FROM QUANTITY 
						WHERE 1=1
						AND NAME ='STC_100'
					) QTY, 
					( 
						SELECT 
							(NVL(SUM(STC_250),0)*250)+(NVL(SUM(STC_500),0)*500)+(NVL(SUM(STC_1000),0)*1000) STCSUM
						FROM PURCH_ORDER
						WHERE 1=1
						AND ORDERDATE BETWEEN TRUNC(SYSDATE, 'IW')-1 AND TRUNC(SYSDATE, 'IW')+5
					) PURCH
				) STC
				ON ING_ORI_ERL.CODE=STC.STC_IGT_CODE
			) N	
		) C
		ON C.CODE = A.ITEM
		) T
		ON T.CODE = B.CODE2WEEK
	) Z
	ORDER BY Z.KNAME


 ******************************* ORIGINAL, EARLGREY, SALTCARAMEL 100G 함류량 ********************************************
SELECT ori_erl.code, ori_erl.kname, ori_erl.ename, ori_erl.ori_igt_code, ori_erl.ori_qty, ori_erl.erl_igt_code, ori_erl.erl_qty, d.igt_code, d.stc_qty
from
(SELECT ori.code code, ori.kname kname, ori.ename ename, ori.igt_code ori_igt_code, ori.ori_qty ori_qty, c.igt_code erl_igt_code, c.erl_qty erl_qty 
from
(SELECT a.code, a.kname, a.ename, b.igt_code, b.ori_qty
from
(select  code, kname, ename
from INGREDIENT 
) a
left OUTER JOIN 
(select  igt_code, ingredient, qty ori_qty
from quantity
where NAME ='ORI_100') b
ON a.code = b.igt_code
ORDER BY a.code ) ori
left OUTER JOIN 
(select  igt_code, ingredient, qty erl_qty
from quantity
where NAME ='ERL_100') c
ON ori.code = c.igt_code) ori_erl
left OUTER JOIN 
(select  igt_code, ingredient, qty stc_qty
from quantity
where NAME ='STC_100') d
ON ori_erl.code = d.igt_code

******************************* ORIGINAL, EARLGREY, SALTCARAMEL 100G 함류량 + 전제 재고 *******************************

SELECT II.KNAME KNAME, II.ENAME ENAME, II.CODE CODE, NVL(II.ORI_QTY, 0) ORI_QTY, NVL(II.ERL_QTY, 0) ERL_QTY, NVL(II.STC_QTY, 0) STC_QTY, NVL(II.ST.TOTAL, 0) TOTAL
FROM (
	SELECT I.KNAME, I.ENAME, I.CODE, I.ORI_QTY, I.ERL_QTY, I.STC_QTY
	FROM (
		SELECT ORI_ERL.CODE, ORI_ERL.KNAME, ORI_ERL.ENAME, ORI_ERL.ORI_QTY, ORI_ERL.ERL_QTY, D.STC_QTY
		FROM
		(
			SELECT ORI.CODE CODE, ORI.KNAME KNAME, ORI.ENAME ENAME, ORI.ORI_QTY ORI_QTY, C.ERL_QTY ERL_QTY 
			FROM
			(
				SELECT A.CODE, A.KNAME, A.ENAME, B.ORI_QTY
				FROM
				(	// 재료 목록 구하기
					SELECT  CODE, KNAME, ENAME FROM INGREDIENT 
				) A
				LEFT OUTER JOIN 
				(	// ORIGINAL 100g 재료 구하기
					SELECT  IGT_CODE, INGREDIENT, QTY ORI_QTY
					FROM QUANTITY
					WHERE NAME ='ORI_100'
				) B
				ON A.CODE = B.IGT_CODE
				ORDER BY A.CODE 
			) ORI
			LEFT OUTER JOIN 
			(	// EARLGREY 100g 재료 구하기
				SELECT  IGT_CODE, INGREDIENT, QTY ERL_QTY
				FROM QUANTITY
				WHERE NAME ='ERL_100'
			) C
			ON ORI.CODE = C.IGT_CODE
		) ORI_ERL
		LEFT OUTER JOIN 
		(	// SALTCARAMEL 100g 재료 구하기
			SELECT  IGT_CODE, INGREDIENT, QTY STC_QTY
			FROM QUANTITY
			WHERE NAME ='STC_100'
		) D
		ON ORI_ERL.CODE = D.IGT_CODE 
	) I 
) II
LEFT OUTER JOIN 
(  // 전 재료의 재고량 STOCK AS S / ST
	SELECT S.ITEM ITEM, (S.INTOTAL - S.OUTTOTAL - S.DISTOTAL) TOTAL
	FROM 
	(	SELECT 	ITEM,
				SUM(CASE WHEN GUBUN = '구매' THEN SUMQTY ELSE 0 END) INTOTAL,
				SUM(CASE WHEN GUBUN = '반품' THEN SUMQTY ELSE 0 END) OUTTOTAL,
				SUM(CASE WHEN GUBUN = '폐기' THEN SUMQTY ELSE 0 END) DISTOTAL
		FROM PURCH_ING		
		GROUP BY ITEM
	) S 
	ORDER BY S.ITEM 
) ST
ON II.CODE = ST.ITEM	
 -->