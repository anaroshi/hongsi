<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 1. com.hongsi.purchbook.mapper.ItemMapper 인터페이스 선언 -->
<!-- 2. root-context.xml <mybatis-spring:scan ~~ /> 태그로 기본 패키지 지정 -->
<!-- 3. com.hongsi.purchbook.mapper.ItemMapper.xml 실행 작성 - src/main/resources -->
<!-- <![CDATA[ 이 사이에 있는 것은 mybatis가 처리하지 않고 그대로 넘긴다. DB에서 처리되도록 ]]> -->

<mapper namespace="com.hongsi.purchbook.mapper.PurchIngMapper">
	
	<!-- 재료 구매 리스트 검색 조건 -->
	<sql id="buySelect">
		<if test="buyDate != null and buyDate != ''.toString()">
			<if test="buyDate.length == 10">	
				AND BUYDATE = to_date(#{buyDate},'YYYY-MM-DD')
			</if>
			<if test="buyDate.length() > 10">
				AND BUYDATE BETWEEN to_date(SUBSTR(#{buyDate},0,10),'YYYY-MM-DD') AND to_date(SUBSTR(#{buyDate},13,23),'YYYY-MM-DD')
			</if>
		</if>
		<if test="gubun != null and gubun != ''.toString()">
				AND GUBUN = #{gubun}
		</if>
		<if test="item != null and item != ''.toString()">
				AND ITEM = #{item}
		</if>
		<if test="purShop != null and purShop != ''.toString()">
				AND PURSHOP = #{purShop}
		</if>
		<if test="inDate != null and inDate != ''.toString()">
			<if test="inDate.length == 10">	
				AND INDATE = to_date(#{inDate},'YYYY-MM-DD')
			</if>
			<if test="inDate.length() > 10">
				AND INDATE BETWEEN to_date(SUBSTR(#{inDate},0,10),'YYYY-MM-DD') AND to_date(SUBSTR(#{inDate},13,23),'YYYY-MM-DD')
			</if>
		</if>
		<if test="notIn != null and notIn != ''.toString()">
				AND INDATE IS NULL
		</if>
	</sql>
	
	
	<!-- 재료 구매 & 입출고 리스트 검색 조건 -->
	<sql id="ingSelect">
		<if test="buyDate != null and buyDate != ''.toString()">
			<if test="buyDate.length == 10">	
				AND BUYDATE = to_date(#{buyDate},'YYYY-MM-DD')
			</if>
			<if test="buyDate.length() > 10">
				AND BUYDATE BETWEEN to_date(SUBSTR(#{buyDate},0,10),'YYYY-MM-DD') AND to_date(SUBSTR(#{buyDate},13,23),'YYYY-MM-DD')
			</if>
		</if>
		<if test="gubun != null and gubun != ''.toString()">
			<if test="gubun == '출고'">
				AND GUBUN LIKE '%' || #{gubun} || '%'
			</if>
			<if test="gubun == '입고'">
				AND GUBUN LIKE '%' || #{gubun} || '%'
			</if>
			<if test="gubun != '출고' and gubun != '입고'">
				AND GUBUN = #{gubun}
			</if>	
		</if>
		<if test="item != null and item != ''.toString()">
				AND ITEM = #{item}
		</if>
		<if test="purShop != null and purShop != ''.toString()">
				AND PURSHOP = #{purShop}
		</if>
		<if test="inDate != null and inDate != ''.toString()">
			<if test="inDate.length == 10">	
				AND INDATE = to_date(#{inDate},'YYYY-MM-DD')
			</if>
			<if test="inDate.length() > 10">
				AND INDATE BETWEEN to_date(SUBSTR(#{inDate},0,10),'YYYY-MM-DD') AND to_date(SUBSTR(#{inDate},13,23),'YYYY-MM-DD')
			</if>
		</if>
		<if test="notIn != null and notIn != ''.toString()">
				AND INDATE IS NULL
		</if>
	</sql>

	<!-- 재료 입출고 리스트 검색 조건 -->
	<sql id="storageSelect">
		<if test="buyDate != null and buyDate != ''.toString()">
			<if test="buyDate.length == 10">	
				AND BUYDATE = to_date(#{buyDate},'YYYY-MM-DD')
			</if>
			<if test="buyDate.length() > 10">
				AND BUYDATE BETWEEN to_date(SUBSTR(#{buyDate},0,10),'YYYY-MM-DD') AND to_date(SUBSTR(#{buyDate},13,23),'YYYY-MM-DD')
			</if>
		</if>
		<if test="gubun != null and gubun != ''.toString()">
			<if test="gubun == '구매'">
				AND GUBUN LIKE '%' || #{gubun} || '%'
			</if>
			<if test="gubun == '출고'">
				AND GUBUN LIKE '%' || #{gubun} || '%'
			</if>
			<if test="gubun == '입고'">
				AND GUBUN LIKE '%' || #{gubun} || '%'
			</if>
			<if test="gubun != '구매' and gubun != '출고' and gubun != '입고'">
				AND GUBUN = #{gubun}
			</if>	
		</if>
		<if test="item != null and item != ''.toString()">
				AND ITEM = #{item}
		</if>
	</sql>	
	
	
	<!-- 	재료 구매한 리스트 -->
	<select id="list" resultType="com.hongsi.purchbook.vo.PurchIngVO">
	SELECT 	RNUM, 
			CNO,
			BUYDATE, 
			GUBUN,
			ITEM,		
			CONTENT,		
			QTY,
			SUMQTY,	
			PRICE,
			PURSHOP,
			INDATE,
			COMM
	FROM
	(	
		SELECT ROWNUM RNUM, 	
			P.CNO,
			P.BUYDATE, 
			P.GUBUN,
			I.KNAME ITEM,		
			P.CONTENT,		
			P.QTY,		
			P.SUMQTY,		
			P.PRICE,
			P.PURSHOP,			
			P.INDATE,
			P.COMM
		FROM 
		(
		SELECT 
				CNO,
				TO_CHAR(BUYDATE, 'yyyy-MM-dd') BUYDATE,
				ITEM,
				GUBUN,
				CONTENT,		
				QTY,					
				PRICE,
				PURSHOP,			
				TO_CHAR(INDATE, 'yyyy-MM-dd')  INDATE,
				COMM,		
				RDATE,
				SUMQTY		
			FROM PURCH_ING
			WHERE	STATUS = 'purch'
			AND FLAG != 4
			<include refid="buySelect" />
			ORDER BY BUYDATE DESC
		) P,
		(
			SELECT KNAME, CODE FROM INGREDIENT
		) I
		WHERE 	P.ITEM = I.CODE		
	)
	WHERE 1=1
	AND RNUM BETWEEN #{startRow} AND #{endRow}		
	</select>

	<!-- 총 재료 주문 건수 -->
	<select id="getBuyTotalRow" resultType="java.lang.Integer">
	SELECT 	COUNT(*)
	FROM 	PURCH_ING
	WHERE	STATUS = 'purch'
	AND 	FLAG != 4
	<include refid="buySelect" />
	</select>

	<!-- 	주문번호에 의한 재료 구매 or 입출고 정보 가져오기 -->
	<select id="selectBuyStorageInfoByCno" resultType="com.hongsi.purchbook.vo.PurchIngVO">
	SELECT 	
		P.CNO,
		P.BUYDATE, 
		P.ITEM,
		I.KNAME,		
		P.GUBUN,
		P.CONTENT,		
		P.QTY,		
		P.PRICE,
		P.PURSHOP,
		P.INDATE,
		P.COMM,
		P.BUYER,
		P.SUMQTY,
		P.RDATE
	FROM 
	(
	SELECT 
			CNO,
			TO_CHAR(BUYDATE, 'yyyy-MM-dd') BUYDATE,
			ITEM,
			GUBUN,
			CONTENT,		
			QTY,		
			PRICE,
			PURSHOP,			
			TO_CHAR(INDATE, 'yyyy-MM-dd')  INDATE,
			COMM,
			BUYER,
			SUMQTY,
			RDATE		
		FROM PURCH_ING
		WHERE	STATUS = #{status}
		AND FLAG != 4
		AND		CNO = #{cno}
	) P,
	(
		SELECT KNAME, CODE FROM INGREDIENT
	) I
	WHERE P.ITEM = I.CODE
	ORDER BY P.BUYDATE DESC 
	</select>

	<!-- 	재료 구매 or 입출고 정보삭제 처리		 -->
	<update id="deleteIng">
	UPDATE PURCH_ING
	SET 	FLAG = 4, UDATE = SYSDATE
	WHERE 	CNO	= #{cno}
	AND		STATUS = #{status}
	</update>
	
	<!-- 	구매한 재료중에 입력일이 없는 재료들만 구하기 : 재료구매 화면에서 입력일 기입 가능 -->
	<select id="selectNonInDate" resultType="com.hongsi.purchbook.vo.PurchIngVO">		
	SELECT 	
		P.CNO,		
		P.BUYDATE, 
		P.ITEM, 
		I.KNAME, 
		P.GUBUN,
		P.CONTENT,		
		P.QTY,		
		P.PRICE,
		P.PURSHOP
	FROM 
	(
		SELECT 
			CNO,
			TO_CHAR(BUYDATE, 'yyyy-MM-dd') BUYDATE,
			ITEM,
			GUBUN,
			CONTENT,		
			QTY,		
			PRICE,
			PURSHOP	
		FROM PURCH_ING
		WHERE 	INDATE IS NULL
		AND		STATUS = 'purch'
		AND FLAG != 4
	) P,
	(
		SELECT KNAME, CODE FROM INGREDIENT
	) I
	WHERE P.ITEM = I.CODE
	ORDER BY P.BUYDATE DESC
	</select>
	
	<!-- 	구매한 재료중에 입력일이 있는 재료들만 구하기 -->
	<select id="selectInDate" resultType="com.hongsi.purchbook.vo.PurchIngVO">		
	SELECT
			RNUM,
			CNO,		
			BUYDATE, 
			ITEM, 
			KNAME, 
			GUBUN,
			CONTENT,		
			QTY,		
			PRICE,
			PURSHOP,
			INDATE
	FROM
	(
		SELECT
			ROWNUM RNUM,
				CNO,		
				BUYDATE, 
				ITEM, 
				KNAME, 
				GUBUN,
				CONTENT,		
				QTY,		
				PRICE,
				PURSHOP,
				INDATE
		FROM
		(
			SELECT 	
				P.CNO,		
				P.BUYDATE, 
				P.ITEM, 
				I.KNAME, 
				P.GUBUN,
				P.CONTENT,		
				P.QTY,		
				P.PRICE,
				P.PURSHOP,
				P.INDATE
			FROM 
			(
				SELECT 
					CNO,
					TO_CHAR(BUYDATE, 'yyyy-MM-dd') BUYDATE,
					ITEM,
					GUBUN,
					CONTENT,		
					QTY,		
					PRICE,
					PURSHOP,
					TO_CHAR(INDATE, 'yyyy-MM-dd') INDATE	
				FROM PURCH_ING
				WHERE 	INDATE IS NOT NULL
				AND		STATUS = 'purch'
				AND FLAG != 4				
			) P,
			(
				SELECT KNAME, CODE FROM INGREDIENT
			) I
			WHERE P.ITEM = I.CODE
			ORDER BY P.BUYDATE DESC
		)
	)
	WHERE 	1 = 1	
	AND 	RNUM BETWEEN #{startRow} AND #{endRow}	
	</select>

	<!-- 구매한 재료중에 입력일이 있는 재료들 총 갯수 -->
	<select id="getInTotalRow" resultType="java.lang.Integer">
	SELECT	COUNT(*) 
	FROM PURCH_ING
	WHERE 	INDATE IS NOT NULL
	AND		STATUS = 'purch'
	AND 	FLAG != 4		
	</select>

	<!-- 	재료 구매 정보 저장 -->
	<insert id="insertIng">
	INSERT INTO PURCH_ING (
		CNO,
		BUYDATE,
		ITEM,
		GUBUN,
		CONTENT,
		QTY,				
		PRICE,	
		PURSHOP,		
		INDATE,
		COMM,
		BUYER,
		SUMQTY,
		STATUS,
		GUBUNCODE,
		FLAG
	) VALUES (
		PURCH_ING_PK.NEXTVAL,
		#{buyDate},
		#{item},
		#{gubun},
		#{content},
		#{qty},		
		#{price},
		#{purShop},
		TO_DATE(#{inDate},'YYYYMMDD'),
		#{comm},
		#{buyer},
		#{content} * #{qty},
		#{status},
		#{gubunCode},
		#{flag}
	)
	</insert>

	<!-- 재료재고 화면 -->
	<select id="selectIgdTotalList" resultType="com.hongsi.purchbook.vo.PurchIngVO">
	SELECT	
		AT.ITEM, AT.KNAME, AT.INTOTAL, AT.OUTTOTAL, AT.DISTOTAL, AT.TOTAL, 
		NVL(CT.ITEM,0) ITEM, NVL(CT.INCAFETOTAL,0) INCAFETOTAL, NVL(CT.OUTCAFETOTAL,0)OUTCAFETOTAL, 
		NVL(CT.SUMCAFE,0) SUMCAFE, NVL(CT.DISCAFETOTAL,0) DISCAFETOTAL
	FROM
	(	
		SELECT 	A.ITEM ITEM,
				B.KNAME KNAME,
				(A.INT_1 + A.INT_2 + A.INT_3 + A.INT_4 + A.INT_5 + A.INT_6 + A.INT_7) INTOTAL,
				(A.OUT_1 + A.OUT_2 + A.OUT_3 + A.OUT_4) OUTTOTAL,
				(A.DIS_1 + A.DIS_2) DISTOTAL,
				(A.IN_TOTAL - A.OUT_TOTAL) TOTAL
		FROM 
		(	SELECT 	ITEM,
					SUM(CASE WHEN GUBUN = '신규' THEN SUMQTY ELSE 0 END) INT_1,
					SUM(CASE WHEN GUBUN = '구매' THEN SUMQTY ELSE 0 END) INT_2,
					SUM(CASE WHEN GUBUN = '반품' THEN SUMQTY ELSE 0 END) INT_3,
					SUM(CASE WHEN GUBUN = '구매_office' THEN SUMQTY ELSE 0 END) INT_4,
					SUM(CASE WHEN GUBUN = '구매_cafe' THEN SUMQTY ELSE 0 END) INT_5,				
					SUM(CASE WHEN GUBUN = '입고_office' THEN SUMQTY ELSE 0 END) INT_6,
					SUM(CASE WHEN GUBUN = '입고_cafe' THEN SUMQTY ELSE 0 END) INT_7,
					SUM(CASE WHEN GUBUN = '출고' THEN SUMQTY ELSE 0 END) OUT_1,
					SUM(CASE WHEN GUBUN = '교환' THEN SUMQTY ELSE 0 END) OUT_2,
					SUM(CASE WHEN GUBUN = '출고_office' THEN SUMQTY ELSE 0 END) OUT_3,
					SUM(CASE WHEN GUBUN = '출고_cafe' THEN SUMQTY ELSE 0 END) OUT_4,				
					SUM(CASE WHEN GUBUN = '손실' THEN SUMQTY ELSE 0 END) DIS_1,							
					SUM(CASE WHEN GUBUN = '폐기' THEN SUMQTY ELSE 0 END) DIS_2,
					SUM(CASE WHEN GUBUNCODE = 'in' THEN SUMQTY ELSE 0 END) IN_TOTAL,
					SUM(CASE WHEN GUBUNCODE = 'out' THEN SUMQTY ELSE 0 END) OUT_TOTAL
			FROM 	PURCH_ING
			WHERE 	INDATE IS NOT NULL
			AND 	FLAG != 4
			GROUP BY ITEM
		) A
		INNER JOIN INGREDIENT B ON A.ITEM = B.CODE
	) AT
	FULL OUTER JOIN
	(
		SELECT IO.ITEM, IO.INCAFETOTAL INCAFETOTAL, IO.OUTCAFETOTAL OUTCAFETOTAL, IO.SUMCAFE, NVL(C.DISCAFETOTAL,0) DISCAFETOTAL
		FROM 
		(
			SELECT A.ITEM, NVL(A.INCAFETOTAL,0) INCAFETOTAL, NVL(B.OUTCAFETOTAL,0) OUTCAFETOTAL, (NVL(A.INCAFETOTAL,0) - NVL(B.OUTCAFETOTAL,0) ) SUMCAFE
			FROM 
			(
				SELECT ITEM, SUM( NVL(SUMQTY,0)) INCAFETOTAL FROM PURCH_ING
				WHERE 1=1
				AND GUBUNCODE = 'in'
				AND ( GUBUN = '입고_cafe' OR GUBUN = '구매_cafe' )
				AND FLAG != 4
				GROUP BY ITEM
			) A
			FULL OUTER JOIN 
			( 
				SELECT ITEM, SUM( NVL(SUMQTY,0)) OUTCAFETOTAL FROM PURCH_ING
				WHERE  STATUS = 'storage'
				AND GUBUNCODE = 'out' 
				AND GUBUN = '출고_cafe'
				AND FLAG != 4
				AND GUBUN != '손실'
				AND GUBUN != '반품'
				AND GUBUN != '취소'	
				GROUP BY ITEM
			) B
			ON A.ITEM = B.ITEM
		) IO
		FULL OUTER JOIN 
		( 
			SELECT ITEM, SUM( NVL(SUMQTY,0)) DISCAFETOTAL FROM PURCH_ING
			WHERE  STATUS = 'storage'
			AND GUBUNCODE = 'out' 
			AND GUBUN = '출고_cafe'
			AND FLAG != 4
			AND GUBUN = '손실'	
			GROUP BY ITEM
		) C
		ON IO.ITEM = C.ITEM		
	) CT	
	ON AT.ITEM = CT.ITEM	
	ORDER BY AT.KNAME
	</select>
		
	<!-- 	재료구매 화면에서 입력일 입력 -->
	<update id="updateInDate">
	UPDATE PURCH_ING 
	SET INDATE = TO_DATE(#{inDate},'YYYY-MM-DD'), FLAG = 2	
	WHERE CNO = #{cno}	
	</update>	

	<!-- 	재료 입출고 List -->
	<select id="selectStorageInOut" resultType="com.hongsi.purchbook.vo.PurchIngVO">		
	SELECT
		RNUM,
		CNO,		
		BUYDATE, 
		ITEM, 
		KNAME, 
		GUBUN,
		CONTENT,		
		QTY,		
		BUYER,
		COMM
	FROM 
	(	
		SELECT
			ROWNUM RNUM,
			P.CNO,		
			P.BUYDATE, 
			P.ITEM, 
			I.KNAME, 
			P.GUBUN,
			P.CONTENT,		
			P.QTY,		
			P.BUYER,
			P.COMM
		FROM 
		(
			SELECT 
				CNO,
				TO_CHAR(BUYDATE, 'yyyy-MM-dd') BUYDATE,
				ITEM,
				GUBUN,
				CONTENT,		
				QTY,						
				BUYER,
				COMM
			FROM PURCH_ING
			WHERE STATUS = 'storage'
			AND FLAG != 4
			<include refid="storageSelect" />	
			ORDER BY BUYDATE DESC		
		) P,
		(
			SELECT KNAME, CODE FROM INGREDIENT
		) I
		WHERE P.ITEM = I.CODE		
	)
	WHERE 	1 = 1	
	AND 	RNUM BETWEEN #{startRow} AND #{endRow}
	</select>

	<!-- 총 재료 입출고 건수 -->
	<select id="getStorageInOutTotalRow" resultType="java.lang.Integer">
		SELECT 	COUNT(*)
		FROM 	PURCH_ING
		WHERE	STATUS = 'storage'
		AND 	FLAG != 4
		<include refid="storageSelect" />
	</select>

	<!-- 재료 구매 정보 수정 처리 -->
	<update id="updateIng">
	UPDATE 	PURCH_ING
	SET		BUYDATE = #{buyDate},		
			ITEM 	= #{item},		
			GUBUN 	= #{gubun},
			CONTENT = #{content},
			QTY 	= #{qty},
			PRICE	= #{price},
			PURSHOP = #{purShop},
			INDATE 	= TO_DATE(#{inDate},'YYYYMMDD'),
			COMM 	= #{comm},
			BUYER 	= #{buyer},
			SUMQTY 	= #{content} * #{qty},
			STATUS 	= #{status},
			GUBUNCODE = #{gubunCode},
			FLAG 	= 2,
			UDATE 	= SYSDATE	
	WHERE 	CNO 	= #{cno}
	AND		FLAG 	!= 4
	</update>

	<!-- 	재료입출고 화면용 -->
	<!-- 	재고 & 재료 (ori 필요 & erl 필요 & stc 필요 & 금주필요 & 카페재고 & 사무실재고(제조시 가지고가야 할 양)) -->
	<select id="selectNeedCafe" resultType="com.hongsi.quantity.vo.QuantityVO">
	<!-- SELECT STOCK.ITEM, STOCK.TOTAL, NZ.CODE, NZ.KNAME, NZ.ORINEED, NZ.ERLNEED, NZ.STCNEED, NZ.NEEDSUM, NZ.SUMCAFE, NZ.SUMOFFICE -->
	SELECT STOCK.TOTAL, NZ.KNAME, NZ.NEEDSUM, NZ.SUMCAFE, NZ.SUMOFFICE
	FROM 
	(	<!-- 재료 재고 -->
		SELECT 	A.ITEM ITEM,
				B.KNAME KNAME,
				(A.INT_1 + A.INT_2 + A.INT_3 + A.INT_4 + A.INT_5 + A.INT_6 + A.INT_7) INTOTAL,
				(A.OUT_1 + A.OUT_2 + A.OUT_3 + A.OUT_4) OUTTOTAL,
				(A.DIS_1 + A.DIS_2) DISTOTAL,
				(A.IN_TOTAL - A.OUT_TOTAL) TOTAL
		FROM 
		(	SELECT 	ITEM,
					SUM(CASE WHEN GUBUN = '신규' THEN SUMQTY ELSE 0 END) INT_1,
					SUM(CASE WHEN GUBUN = '구매' THEN SUMQTY ELSE 0 END) INT_2,
					SUM(CASE WHEN GUBUN = '반품' THEN SUMQTY ELSE 0 END) INT_3,					
					SUM(CASE WHEN GUBUN = '구매_office' THEN SUMQTY ELSE 0 END) INT_4,
					SUM(CASE WHEN GUBUN = '구매_cafe' THEN SUMQTY ELSE 0 END) INT_5,				
					SUM(CASE WHEN GUBUN = '입고_office' THEN SUMQTY ELSE 0 END) INT_6,
					SUM(CASE WHEN GUBUN = '입고_cafe' THEN SUMQTY ELSE 0 END) INT_7,
					SUM(CASE WHEN GUBUN = '출고' THEN SUMQTY ELSE 0 END) OUT_1,
					SUM(CASE WHEN GUBUN = '교환' THEN SUMQTY ELSE 0 END) OUT_2,
					SUM(CASE WHEN GUBUN = '출고_office' THEN SUMQTY ELSE 0 END) OUT_3,
					SUM(CASE WHEN GUBUN = '출고_cafe' THEN SUMQTY ELSE 0 END) OUT_4,				
					SUM(CASE WHEN GUBUN = '손실' THEN SUMQTY ELSE 0 END) DIS_1,							
					SUM(CASE WHEN GUBUN = '폐기' THEN SUMQTY ELSE 0 END) DIS_2,
					SUM(CASE WHEN GUBUNCODE = 'in' THEN SUMQTY ELSE 0 END) IN_TOTAL,
					SUM(CASE WHEN GUBUNCODE = 'out' THEN SUMQTY ELSE 0 END) OUT_TOTAL
			FROM 	PURCH_ING
			WHERE 	INDATE IS NOT NULL
			AND 	FLAG != 4
			GROUP BY ITEM
		) A
		INNER JOIN INGREDIENT B ON A.ITEM = B.CODE
	) STOCK
	LEFT JOIN 
	(	<!-- 한주간 주문에 필요한 량, 카페에 있는 재고량, 제조시 카페에 가져가야 할 량 -->
		SELECT 	NEED.CODE, NEED.KNAME, NEED.ORINEED, NEED.ERLNEED, NEED.STCNEED, NEED.NEEDSUM, NVL(CAFE.SUMCAFECONTENT, 0) SUMCAFE, NEED.NEEDSUM - NVL(CAFE.SUMCAFECONTENT, 0) SUMOFFICE
		FROM 
		(
			SELECT N.CODE, N.KNAME,
			N.ORINEED, N.ERLNEED, N.STCNEED, (NVL(N.ORINEED, 0) + NVL(N.ERLNEED, 0) + NVL(N.STCNEED, 0)) NEEDSUM
			FROM 
			(
				SELECT  ING_ORI_ERL.CODE CODE, ING_ORI_ERL.KNAME KNAME, 
				ING_ORI_ERL.ORI_QTY, ING_ORI_ERL.ORISUM, ING_ORI_ERL.ORINEED ORINEED,
				ING_ORI_ERL.ERL_QTY, ING_ORI_ERL.ERLSUM, ING_ORI_ERL.ERLNEED ERLNEED,
				NVL(STC.STC_QTY,0) STC_QTY, NVL(STC.STCSUM,0) STCSUM, NVL(STC.STCNEED,0) STCNEED
				FROM 
				(
					SELECT  ING_ORI.CODE, ING_ORI.KNAME, ING_ORI.ORI_IGT_CODE ORI_IGT_CODE, ING_ORI.ORI_QTY ORI_QTY, ING_ORI.ORISUM ORISUM, ING_ORI.ORINEED ORINEED,
					ERL.ERL_IGT_CODE ERL_IGT_CODE, NVL(ERL.ERL_QTY,0) ERL_QTY, NVL(ERL.ERLSUM,0) ERLSUM, NVL(ERL.ERLNEED,0) ERLNEED
					FROM 
					(	SELECT  ING.CODE, ING.KNAME, NVL(ORI.ORI_IGT_CODE,'') 
								ORI_IGT_CODE, NVL(ORI.ORI_QTY,0) ORI_QTY, 
								NVL(ORI.ORISUM,0) ORISUM, NVL(ORI.ORINEED,0) ORINEED
						FROM 
						(	<!-- 재료 정보 (재료코드, 한글명, 영문명) -->
							SELECT  CODE, KNAME, ENAME FROM INGREDIENT
						) ING
						LEFT OUTER JOIN 
						(
							SELECT QTY.IGT_CODE ORI_IGT_CODE, QTY.QTY ORI_QTY, PURCH.ORISUM, (QTY.QTY * (PURCH.ORISUM/100)) ORINEED
							FROM 
							(
								SELECT IGT_CODE, QTY FROM QUANTITY 
								WHERE 1=1
								AND NAME ='ORI_100'
								ORDER BY IGT_CODE
							) QTY
							, 
							( 	
								SELECT 
									(NVL(SUM(ORI_250),0)*200)+(NVL(SUM(ORI_500),0)*500)+(NVL(SUM(ORI_1000),0)*1000) ORISUM
								FROM PURCH_ORDER
								WHERE 1=1
								AND FLAG != 4
								AND ORDERDATE 
								BETWEEN TRUNC(SYSDATE, 'IW')-1 AND TRUNC(SYSDATE, 'IW')+5
							) PURCH
						) ORI
						ON ING.CODE = ORI.ORI_IGT_CODE
					) ING_ORI
					LEFT OUTER JOIN 
					(	<!-- ERL 1주간 주문량과 재료량 ERL_IGT_CODE:재료코드, ERLSUM: 주문량,  ERLNEED: 주문량에 의한 재료량 -->
						SELECT QTY.IGT_CODE ERL_IGT_CODE, QTY.QTY ERL_QTY, PURCH.ERLSUM, (QTY.QTY * PURCH.ERLSUM/100) ERLNEED
						FROM 
						(	<!-- ERL_100 기본량 -->
							SELECT IGT_CODE , QTY FROM QUANTITY 
							WHERE 1=1
							AND NAME ='ERL_100'
							ORDER BY IGT_CODE
						) QTY, 
						( 	<!-- 1주간 주문량 -->
							SELECT 
							(NVL(SUM(ERL_250),0)*200)+(NVL(SUM(ERL_500),0)*500)+(NVL(SUM(ERL_1000),0)*1000) ERLSUM
							FROM PURCH_ORDER
							WHERE 1=1
							AND FLAG != 4
							AND ORDERDATE BETWEEN TRUNC(SYSDATE, 'IW')-1 AND TRUNC(SYSDATE, 'IW')+5
						) PURCH
					) ERL
					ON ING_ORI.CODE = ERL.ERL_IGT_CODE	
				) ING_ORI_ERL
				LEFT OUTER JOIN 
				(
					SELECT QTY.IGT_CODE STC_IGT_CODE, QTY.QTY STC_QTY, PURCH.STCSUM, (QTY.QTY * PURCH.STCSUM/100) STCNEED
					FROM 
					(
						SELECT IGT_CODE, QTY FROM QUANTITY 
						WHERE 1=1
						AND NAME ='STC_100'
					) QTY, 
					( 
						SELECT 
							(NVL(SUM(STC_250),0)*200)+(NVL(SUM(STC_500),0)*500)+(NVL(SUM(STC_1000),0)*1000) STCSUM
						FROM PURCH_ORDER
						WHERE 1=1
						AND FLAG != 4
						AND ORDERDATE BETWEEN TRUNC(SYSDATE, 'IW')-1 AND TRUNC(SYSDATE, 'IW')+5
					) PURCH
				) STC
				ON ING_ORI_ERL.CODE=STC.STC_IGT_CODE
			) N
		) NEED
		LEFT JOIN
		(	<!-- 카페에 있는 재고량 -->		
			SELECT A.ITEM, (NVL(A.SUMINSUMQTY,0) - NVL(B.SUMOUTSUMQTY,0) ) SUMCAFECONTENT
			FROM 
			(
				SELECT ITEM, SUM( NVL(SUMQTY,0)) SUMINSUMQTY FROM PURCH_ING
				WHERE 1=1
				AND GUBUNCODE = 'in' 
				AND ( GUBUN = '입고_cafe' OR GUBUN = '구매_cafe' )
				AND FLAG != 4
				GROUP BY ITEM
			) A
			FULL OUTER JOIN ( 
				SELECT ITEM, SUM( NVL(SUMQTY,0)) SUMOUTSUMQTY FROM PURCH_ING
				WHERE  1=1
				AND GUBUNCODE = 'out' 
				AND GUBUN = '출고_cafe'
				AND FLAG != 4
				GROUP BY ITEM
			) B
			ON A.ITEM = B.ITEM
		) CAFE
		ON NEED.CODE = CAFE.ITEM		
	)NZ
	ON STOCK.ITEM = NZ.CODE
	ORDER BY STOCK.KNAME
	</select>

	<!-- 	재료 구매 & 입출고 리스트 -->
	<select id="getIngAllList" resultType="com.hongsi.purchbook.vo.PurchIngVO">
	SELECT 	RNUM, 
			CNO,
			BUYDATE, 
			GUBUN,
			ITEM,
			SUMQTY,
			PURSHOP,
			INDATE,
			COMM
	FROM
	(	
		SELECT ROWNUM RNUM, 	
			P.CNO,
			P.BUYDATE, 
			P.GUBUN,
			I.KNAME ITEM,
			P.SUMQTY,
			P.PURSHOP,
			P.INDATE,
			P.COMM
		FROM 
		(
		SELECT 
				CNO,
				TO_CHAR(BUYDATE, 'yyyy-MM-dd') BUYDATE,
				ITEM,
				GUBUN,
				SUMQTY,
				PURSHOP,			
				TO_CHAR(INDATE, 'yyyy-MM-dd')  INDATE,
				COMM,		
				RDATE	
			FROM PURCH_ING
			WHERE 1=1
			AND FLAG != 4
			<include refid="ingSelect" />
			ORDER BY BUYDATE DESC
		) P,
		(
			SELECT KNAME, CODE FROM INGREDIENT
		) I
		WHERE 	P.ITEM = I.CODE		
	)
	WHERE 1=1
	AND RNUM BETWEEN #{startRow} AND #{endRow}		
	</select>

	<!-- 총 재료 주문 & 입출고 건수 -->
	<select id="getIngTotalRow" resultType="java.lang.Integer">
	SELECT 	COUNT(*)
	FROM 	PURCH_ING
	WHERE	1=1
	AND 	FLAG != 4
	<include refid="ingSelect" />
	</select>	
</mapper>