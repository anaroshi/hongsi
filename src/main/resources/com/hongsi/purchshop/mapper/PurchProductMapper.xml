<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 1. com.hongsi.purchshop.mapper.PurchProductMapper 인터페이스 선언 -->
<!-- 2. root-context.xml <mybatis-spring:scan ~~ /> 태그로 기본 패키지 지정 -->
<!-- 3. com.hongsi.purchshop.mapper.PurchProductMapper.xml 실행 작성 - src/main/resources -->
<!-- <![CDATA[ 이 사이에 있는 것은 mybatis가 처리하지 않고 그대로 넘긴다. DB에서 처리되도록 ]]> -->

<mapper namespace="com.hongsi.purchshop.mapper.PurchProductMapper">

	<insert id="insertProduct">
	INSERT INTO PURCH_PRODUCT (
		CNO,
		PRODUCTDATE,
		ORI_250,
		ORI_500,
		ORI_1000,
		ERL_250,		
		ERL_500,		
		ERL_1000,	
		SNS_250,		
		SNS_500,
		SNS_1000,
		GUBUN,
		COMM,
		MANAGER,
		GUBUNCODE,
		STATUS,
		FLAG
	) VALUES (
		PURCHPRODUCT_PK.NEXTVAL,
		#{productDate},
		#{ori_250},
		#{ori_500},
		#{ori_1000},
		#{erl_250},
		#{erl_500},
		#{erl_1000},
		#{sns_250},
		#{sns_500},
		#{sns_1000},
		#{gubun},
		#{comm},
		#{manager},
		#{gubunCode},
		'product',
		1
	)
	</insert>
	
	<select id="selectProductList" resultType="com.hongsi.purchshop.vo.PurchProductVO">
	SELECT 	A.CNO, A.PRODUCTDATE, A.GUBUN, 
			A.ORI_250, A.ORI_500, A.ORI_1000, 
			A.ERL_250, A.ERL_500, A.ERL_1000, 
			A.SNS_250, A.SNS_500, A.SNS_1000,
			A.ORI_250_FORMAT || A.ORI_500_FORMAT || A.ORI_1000_FORMAT ORI_250_FORMAT,
			A.ERL_250_FORMAT || A.ERL_500_FORMAT || A.ERL_1000_FORMAT ERL_250_FORMAT,
			A.SNS_250_FORMAT || A.SNS_500_FORMAT || A.SNS_1000_FORMAT SNS_250_FORMAT,
			A.COMM
	FROM (	
		SELECT 	CNO, GUBUN,
				PRODUCTDATE, 
				ORI_250, ORI_500, ORI_1000, 
				ERL_250, ERL_500, ERL_1000, 
				SNS_250, SNS_500, SNS_1000,
				CASE WHEN ORI_250 > 0 
				THEN 'ORI_250 : '|| TO_CHAR(ORI_250,'999,999,999')||' 개, '
				ELSE ''
				END AS ORI_250_FORMAT,
				CASE WHEN ORI_500 > 0 
					THEN 'ORI_500 : '|| TO_CHAR(ORI_500,'999,999,999')||' 개, '
					ELSE ''
				END AS ORI_500_FORMAT,
				CASE WHEN ORI_1000 > 0 
					THEN 'ORI_1000 : '|| TO_CHAR(ORI_1000,'999,999,999')||' 개, '
					ELSE ''
				END AS ORI_1000_FORMAT,		
				CASE WHEN ERL_250 > 0 
					THEN 'ERL_250 : '|| TO_CHAR(ERL_250,'999,999,999')||' 개, '
					ELSE ''
				END AS ERL_250_FORMAT,
				CASE WHEN ERL_500 > 0 
					THEN 'ERL_500 : '|| TO_CHAR(ERL_500,'999,999,999')||' 개, '
					ELSE ''
				END AS ERL_500_FORMAT,
				CASE WHEN ERL_1000 > 0 
					THEN 'ERL_1000 : '|| TO_CHAR(ERL_1000,'999,999,999')||' 개, '
					ELSE ''
				END AS ERL_1000_FORMAT,
				CASE WHEN SNS_250 > 0 
					THEN 'SNS_250 : '|| TO_CHAR(SNS_250,'999,999,999')||' 개, '
					ELSE ''
				END AS SNS_250_FORMAT,
				CASE WHEN SNS_500 > 0 
					THEN 'SNS_500 : '|| TO_CHAR(SNS_500,'999,999,999')||' 개, '
					ELSE ''
				END AS SNS_500_FORMAT,
				CASE WHEN SNS_1000 > 0 
					THEN 'SNS_1000 : '|| TO_CHAR(SNS_1000,'999,999,999')||' 개'
					ELSE ''
				END AS SNS_1000_FORMAT,
				COMM
		FROM 	PURCH_PRODUCT
		WHERE 	STATUS = 'product'
		AND 	FLAG != 4
		ORDER BY PRODUCTDATE DESC
	) A	
	</select>
	
	<select id="selectProductStock" resultType="com.hongsi.purchshop.vo.PurchProductVO">
	SELECT 	
	(A.IN_ORI_250_TOTAL-B.OUT_ORI_250_TOTAL) 	ORI_250_SUM,
	(A.IN_ORI_500_TOTAL-B.OUT_ORI_500_TOTAL) 	ORI_500_SUM,
	(A.IN_ORI_1000_TOTAL-B.OUT_ORI_1000_TOTAL) 	ORI_1000_SUM,
	(C.IN_ERL_250_TOTAL-D.OUT_ERL_250_TOTAL) 	ERL_250_SUM,
	(C.IN_ERL_500_TOTAL-D.OUT_ERL_500_TOTAL) 	ERL_500_SUM,
	(C.IN_ERL_1000_TOTAL-D.OUT_ERL_1000_TOTAL) 	ERL_1000_SUM,
	(E.IN_SNS_250_TOTAL-F.OUT_SNS_250_TOTAL) 	SNS_250_SUM,
	(E.IN_SNS_500_TOTAL-F.OUT_SNS_500_TOTAL) 	SNS_500_SUM,
	(E.IN_SNS_1000_TOTAL-F.OUT_SNS_1000_TOTAL) 	SNS_1000_SUM		
	FROM 
	(
		SELECT 	
			NVL(SUM(ORI_250),0) IN_ORI_250_TOTAL,
			NVL(SUM(ORI_500),0) IN_ORI_500_TOTAL,
			NVL(SUM(ORI_1000),0) IN_ORI_1000_TOTAL
		FROM PURCH_PRODUCT
		WHERE GUBUNCODE = 'in'
		AND FLAG != 4
	) A,
	(
		SELECT 	
			NVL(SUM(ORI_250),0) OUT_ORI_250_TOTAL,
			NVL(SUM(ORI_500),0) OUT_ORI_500_TOTAL,
			NVL(SUM(ORI_1000),0) OUT_ORI_1000_TOTAL
		FROM PURCH_PRODUCT
		WHERE GUBUNCODE = 'out'
		AND FLAG != 4
	) B,
	(
		SELECT 	
			NVL(SUM(ERL_250),0) IN_ERL_250_TOTAL,
			NVL(SUM(ERL_500),0) IN_ERL_500_TOTAL,
			NVL(SUM(ERL_1000),0) IN_ERL_1000_TOTAL
		FROM PURCH_PRODUCT
		WHERE GUBUNCODE = 'in'
		AND FLAG != 4
	) C,
	(
		SELECT 	
			NVL(SUM(ERL_250),0) OUT_ERL_250_TOTAL,
			NVL(SUM(ERL_500),0) OUT_ERL_500_TOTAL,
			NVL(SUM(ERL_1000),0) OUT_ERL_1000_TOTAL
		FROM PURCH_PRODUCT
		WHERE GUBUNCODE = 'out'
		AND FLAG != 4
	) D,
	(
		SELECT 	
			NVL(SUM(SNS_250),0) IN_SNS_250_TOTAL,
			NVL(SUM(SNS_500),0) IN_SNS_500_TOTAL,
			NVL(SUM(SNS_1000),0) IN_SNS_1000_TOTAL
		FROM PURCH_PRODUCT
		WHERE GUBUNCODE = 'in'
		AND FLAG != 4
	) E,
	(
		SELECT 	
			NVL(SUM(SNS_250),0) OUT_SNS_250_TOTAL,
			NVL(SUM(SNS_500),0) OUT_SNS_500_TOTAL,
			NVL(SUM(SNS_1000),0) OUT_SNS_1000_TOTAL
		FROM PURCH_PRODUCT
		WHERE GUBUNCODE = 'out'
		AND FLAG != 4
	) F
	</select>
	
</mapper>
